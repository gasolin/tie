{"version":3,"sources":["src/components/TetherInvoice.js","src/helpers/constants.js","src/components/InvoiceForm.js","src/view/Main.js","App.js"],"names":["symbol","address","amount","useState","invoice","setInvoice","showCopied","setShowCopied","useEffect","handleCopy","Clipboard","renderIcon","props","TouchableWithoutFeedback","onPress","MaterialIcons","name","size","color","View","style","styles","container","value","backdropStyle","backdrop","visible","anchor","label","accessoryRight","input","onBackdropPress","content","StyleSheet","create","paddingVertical","flexDirection","alignItems","paddingHorizontal","backgroundColor","SUPPORT_PAYMENTS","IndexPath","selectedIndex","setSelectedIndex","setAddress","setAmount","showInvoice","setShowInvoice","displayValue","row","handlePaste","a","async","text","onSelect","field","map","item","title","key","placeholder","onChangeText","button","TetherInvoice","captionContainer","display","captionIcon","width","height","marginRight","captionText","fontSize","fontWeight","fontFamily","marginVertical","InvoiceForm","App","Main","StatusBar","eva","theme","flex","justifyContent"],"mappings":"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","file":"static/js/app.6a45a4ef.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { TouchableWithoutFeedback, View, StyleSheet } from 'react-native'\nimport { Input, Layout, Popover, Text } from '@ui-kitten/components'\nimport QRCode from 'react-native-qrcode-svg'\nimport * as Clipboard from 'expo-clipboard'\nimport { MaterialIcons } from '@expo/vector-icons'\n\nexport default ({ symbol, address, amount }) => {\n  const [invoice, setInvoice] = useState('')\n  const [showCopied, setShowCopied] = useState(false)\n\n  useEffect(() => {\n    setInvoice(`${symbol}:${address}?amount=${amount}`)\n  }, [symbol, address, amount])\n\n  if (invoice === '') {\n    return null\n  }\n\n  const handleCopy = () => {\n    Clipboard.setString(invoice)\n    setShowCopied(true)\n  }\n\n  const renderIcon = (props) => (\n    <TouchableWithoutFeedback onPress={handleCopy}>\n      <MaterialIcons name=\"content-copy\" size={16} color=\"black\" />\n    </TouchableWithoutFeedback>\n  )\n\n  const renderInvoice = () => (\n    <Input\n      value={invoice}\n      label='Invoice'\n      accessoryRight={renderIcon}\n      style={styles.input}\n    />\n  )\n\n  return (\n    <View style={styles.container}>\n      <QRCode value={invoice} size={280} />\n      <Popover\n        backdropStyle={styles.backdrop}\n        visible={showCopied}\n        anchor={renderInvoice}\n        onBackdropPress={() => setShowCopied(false)}>\n        <Layout style={styles.content}>\n          <Text>\n            Invoice copied to Clipboard\n          </Text>\n        </Layout>\n      </Popover>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 16,\n  },\n  input: {\n    paddingVertical: 8,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    paddingVertical: 8,\n  },\n  backdrop: {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n})\n","export const SUPPORT_PAYMENTS = [\n  {\n    name: 'USDt (Tron)',\n    symbol: 'usdt_tron',\n  },\n  {\n    name: 'USDt (Solana)',\n    symbol: 'usdt_sol',\n  },\n  {\n    name: 'USDt (Liquid)',\n    symbol: 'usdt_liquid',\n  }\n]\n","import React, { useState } from 'react'\nimport { TouchableWithoutFeedback, StyleSheet, View } from 'react-native'\nimport { Button, Icon, IndexPath, Input, Select, SelectItem, Text } from '@ui-kitten/components'\nimport * as Clipboard from 'expo-clipboard'\nimport { MaterialIcons } from '@expo/vector-icons'\n\nimport TetherInvoice from '../components/TetherInvoice'\nimport { SUPPORT_PAYMENTS } from '../helpers/constants'\n\nconst AlertIcon = (props) => (\n  // <Icon {...props} name='alert-circle-outline'/>\n  <Text>{'Alert'}</Text>\n)\n\nexport default () => {\n  const [selectedIndex, setSelectedIndex] = useState(new IndexPath(0))\n  const [address, setAddress] = useState('')\n  const [amount, setAmount] = useState(10)\n  const [showInvoice, setShowInvoice] = useState(false)\n  const displayValue = SUPPORT_PAYMENTS[selectedIndex?.row||0]?.name\n\n  const handlePaste = async () => {\n    const text = await Clipboard.getStringAsync()\n    setAddress(text)\n  }\n\n  const renderIcon = (props) => (\n    <TouchableWithoutFeedback onPress={handlePaste}>\n      <MaterialIcons name=\"content-paste\" size={16} color=\"black\" />\n    </TouchableWithoutFeedback>\n  )\n\n  // const renderCaption = () => {\n  //   return (\n  //     <View style={styles.captionContainer}>\n  //       {AlertIcon(styles.captionIcon)}\n  //       <Text style={styles.captionText}>Should contain at least 8 symbols</Text>\n  //     </View>\n  //   )\n  // }\n\n  const generateInvoice = () => {\n    setShowInvoice(true)\n  }\n\n  return (\n    <View>\n      <Select\n        label='Token - Chain'\n        selectedIndex={selectedIndex}\n        value={displayValue}\n        onSelect={setSelectedIndex}\n        style={styles.field}>\n        {SUPPORT_PAYMENTS.map((item) => (\n          <SelectItem title={item.name} key={item.symbol} />\n        ))}\n      </Select>\n      <Input\n        value={address}\n        label='Address'\n        placeholder='Place your Address'\n        // caption={renderCaption}\n        accessoryRight={renderIcon}\n        onChangeText={setAddress}\n        style={styles.field}\n      />\n      <Input\n        value={amount}\n        label='Amount'\n        placeholder='10'\n        // caption={renderCaption}\n        // accessoryRight={renderIcon}\n        onChangeText={setAmount}\n        style={styles.field}\n      />\n      <Button onPress={generateInvoice} style={styles.button}>\n        Generate Invoice\n      </Button>\n      {showInvoice &&\n      <TetherInvoice\n        symbol={SUPPORT_PAYMENTS[selectedIndex?.row||0].symbol}\n        address={address}\n        amount={amount}\n      />}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  captionContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  captionIcon: {\n    width: 10,\n    height: 10,\n    marginRight: 5\n  },\n  captionText: {\n    fontSize: 12,\n    fontWeight: \"400\",\n    fontFamily: \"opensans-regular\",\n    color: \"#8F9BB3\",\n  },\n  field: {\n    paddingVertical: 8,\n  },\n  button: {\n    paddingVertical: 16,\n    marginVertical: 8,\n  },\n})\n","import React from 'react'\nimport { View } from 'react-native'\nimport { Text } from '@ui-kitten/components'\n\nimport InvoiceForm from '../components/InvoiceForm'\n\nexport default () => (\n  <View>\n    <InvoiceForm />\n  </View>\n)\n","import { StatusBar } from 'expo-status-bar'\nimport React from 'react'\nimport { StyleSheet } from 'react-native'\nimport * as eva from '@eva-design/eva'\nimport { ApplicationProvider, Layout } from '@ui-kitten/components'\n\nimport { default as theme } from './src/helpers/custom-theme.json'\nimport Main from './src/view/Main'\n\nconst App = () => (\n  <Layout style={styles.container}>\n    <Main />\n    <StatusBar style=\"auto\" />\n  </Layout>\n)\n\nexport default () => (\n  <ApplicationProvider {...eva} theme={{...eva.light, ...theme}}>\n    <App />\n  </ApplicationProvider>\n)\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n})\n"],"sourceRoot":""}